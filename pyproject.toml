[project]
name = "agent-rails"
version = "0.1.1"
description = "put your agents on guardrails"
authors = [
    {name = "samjtro", email = "hi@samjtro.com"},
]
dependencies = [
    "pydantic>=2.8.0",
    "anyio>=4.4.0",
    "typing-extensions>=4.12.0",
    "loguru>=0.7.3",
]
requires-python = ">=3.11"
readme = "README.md"
license = {text = "MIT"}
keywords = ["ai", "agents", "lifecycle", "management"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

[project.urls]
Homepage = "https://github.com/rizome-dev/rails"
Repository = "https://github.com/rizome-dev/rails"
Documentation = "https://github.com/rizome-dev/rails#readme"
"Issue Tracker" = "https://github.com/rizome-dev/rails/issues"
Changelog = "https://github.com/rizome-dev/rails/blob/main/CHANGELOG.md"

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.7.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    "ruff>=0.0.280",
    "build>=1.3.0",
    "twine>=6.1.0",
]
adapters = [
    "langchain>=0.1.0",
    "smolagents>=0.1.0",
]

[tool.pdm]
distribution = true
installer = "uv"

[tool.pdm.scripts]
test = "pytest tests/ -v"
test-cov = "pytest tests/ --cov=rails --cov-report=html"
lint = "ruff check src/ tests/"
format = "black src/ tests/"
format-check = "black --check src/ tests/"
typecheck = "mypy src/"
dev-install = "pdm install -d"
clean = "rm -rf .pytest_cache/ htmlcov/ .coverage dist/ build/"
build = "python -m build"
check = "twine check dist/*"


[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
